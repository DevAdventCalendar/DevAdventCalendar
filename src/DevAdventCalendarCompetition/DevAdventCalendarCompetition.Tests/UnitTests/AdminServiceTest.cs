// This file isn't generated, but this comment is necessary to exclude it from StyleCop analysis. // <auto-generated/>
using System;
using System.Collections.Generic;
using AutoFixture.Xunit2;
using DevAdventCalendarCompetition.Repository.Interfaces;
using DevAdventCalendarCompetition.Repository.Models;
using DevAdventCalendarCompetition.Services;
using DevAdventCalendarCompetition.Services.Models;
using DevAdventCalendarCompetition.Tests.AutoFixture;
using FluentAssertions;
using Moq;
using Xunit;

namespace DevAdventCalendarCompetition.Tests.UnitTests
{
    public class AdminServiceTest
    {
        [Theory]
        [AutoMoqData]
        public void GetAllTests_ReturnTestDtoList(
            List<Test> tests,
            [Frozen] Mock<ITestRepository> testRepositoryMock,
            AdminService adminService)
        {
            // Arrange
            testRepositoryMock.Setup(mock => mock.GetAllTests()).Returns(tests);

            // Act
            var result = adminService.GetAllTests();

            // Assert
            result.Should().BeOfType<List<TestDto>>();
            result.Count.Should().Be(tests.Count);
        }

        [Theory]
        [AutoMoqData]
        public void GetTestBy_IdReturnTestDto(
            Test test,
            [Frozen] Mock<ITestRepository> testRepositoryMock,
            AdminService adminService)
        {
            // Arrange
            testRepositoryMock.Setup(mock => mock.GetTestById(It.IsAny<int>())).Returns(test);

            // Act
            var result = adminService.GetTestById(test.Id);

            // Assert
            result.Should().BeOfType<TestDto>();
            result.Id.Should().Be(test.Id);
            result.Number.Should().Be(test.Number);
            result.StartDate.Should().Be(test.StartDate);
            result.EndDate.Should().Be(test.EndDate);
        }

        [Theory]
        [AutoMoqData]
        public void GetPreviousTest_ReturnPreviousTestDto(
            Test currentTest,
            Test previousTest,
            [Frozen] Mock<ITestRepository> testRepositoryMock,
            AdminService adminService)
        {
            // Arrange
            testRepositoryMock.Setup(mock => mock.GetTestByNumber(previousTest.Number)).Returns(previousTest);

            // Act
            var result = adminService.GetPreviousTest(currentTest.Number);

            // Assert
            result.Should().BeOfType<TestDto>();
            result.Number.Should().Be(previousTest.Number);
            result.StartDate.Should().Be(previousTest.StartDate);
            result.EndDate.Should().Be(previousTest.EndDate);
        }

        [Theory]
        [AutoMoqData]
        public void AddTest_AddCorrectAmountOfAnswers(
            TestDto test,
            [Frozen] Mock<ITestRepository> testRepositoryMock,
            AdminService adminService)
        {
            // Act
            adminService.AddTest(test);

            // Assert
            testRepositoryMock.Verify(mock => mock.AddTest(It.Is<Test>(t => t.HashedAnswers.Count == test.Answers.Count)));
        }

        [Theory]
        [AutoMoqData]
        public void UpdateTestDates(
            int testId,
            [Frozen] Mock<ITestRepository> testRepositoryMock,
            AdminService adminService)
        {
            // Act
            adminService.UpdateTestDates(testId, "20");

            // Assert
            testRepositoryMock.Verify(mock => mock.UpdateTestDates(testId, It.IsAny<DateTime>(), It.IsAny<DateTime>()), Times.Once());
        }

        [Theory]
        [AutoMoqData]
        public void UpdateTestEndDate(
            int testId,
            DateTime newDate,
            [Frozen] Mock<ITestRepository> testRepositoryMock,
            AdminService adminService)
        {
            // Act
            adminService.UpdateTestEndDate(testId, newDate);

            // Assert
            testRepositoryMock.Verify(mock => mock.UpdateTestEndDate(testId, newDate), Times.Once());
        }
    }
}